prog -> stmt*;

stmt -> expr-stmt | block | if | while | for | foreach | repeat | break | return | var | func | class | import;
expr-stmt -> expr EOS;
block -> "{" stmt* "}";
if -> "if" "(" expr ")" stmt ("else" stmt)?;
while -> "while" "(" expr ")" stmt;
for -> "for" "(" (var | expr-stmt | ";") expr? ";" expr? ")" stmt;
foreach -> "foreach" "(" "var" ID "in" expr ")" stmt;
repeat -> "repeat" "(" expr ")" stmt;
break -> "break" expr EOS;
return -> "return" expr EOS;
var -> "var" ID "=" expr EOS;
func -> "func" ID "(" params? ")" block;
class -> "class" ID (":" ID ("," ID)*)? "{" (ID "(" params? ")" block)* "}";
import -> "import" ID ("from" STR)? EOS;

expr -> assign | or;
assign -> ID (("=" | "+=" | "-=" | "*=" | "/=" | "**=" | "%=") expr | "++" | "--");
or -> and (("or" | "xor") and)*;
and -> not ("and" not)*;
not -> "not" not | equal;
equal -> compare (("!=" | "==") compare)*;
compare -> term ((">" | ">=" | "<" | "<=") term)*;
term -> factor (("-" | "+") factor)*;
factor -> pow (("/" | "*" | "%") pow)*;
pow -> unary ("**" unary)*
unary -> ("!" | "-") unary | call;
call -> primary ("(" args? ")" | "." ID | "[" expr "]")*;
primary -> "true" | "false" | "null" | "this" | NUM | STR | ID | "(" expr ")" | "[" (expr ("," expr)*)? "]" | "{" (expr ":" expr ("," expr ":" expr)*)? "}";

args -> expr ("," expr)*;
params -> ID ("=" expr)? ("," ID ("=" expr)?)*;